# File: src/deepthought/modules/input_handler.py
import logging
import uuid
import json # Added import
from datetime import datetime
from nats.aio.client import Client as NATS
from nats.js.client import JetStreamContext
# Assuming eda modules are in parent dir relative to modules dir
from ..eda.events import EventSubjects, InputReceivedPayload
from ..eda.publisher import Publisher

logger = logging.getLogger(__name__)

class InputHandler:
    """Handles user input and publishes InputReceived event via JetStream."""

    def __init__(self, nats_client: NATS, js_context: JetStreamContext):
        """Initialize with shared NATS client and JetStream context."""
        self._publisher = Publisher(nats_client, js_context)
        logger.info("InputHandler initialized (JetStream enabled).")

    async def process_input(self, raw_input: str) -> str:
        """Process input (potentially JSON from E2E client) and publish via JetStream."""
        input_id = str(uuid.uuid4()) # This is the InputHandler's internal ID for the event
        timestamp = datetime.utcnow().isoformat()

        text_input = raw_input
        correlation_id = None # This will be the ID from the C# client if input is JSON
        reply_to_e2e = None   # This will be the reply subject if input is JSON

        try:
            data = json.loads(raw_input)
            if isinstance(data, dict):
                text_input = data.get("text_input", raw_input) # Fallback to raw_input
                correlation_id = data.get("input_id")
                reply_to_e2e = data.get("reply_to_e2e")
                logger.info(f"Parsed JSON input. Correlation ID: {correlation_id}, Reply-to-E2E: {reply_to_e2e}")
        except json.JSONDecodeError:
            logger.info("Input is not JSON, processing as plain text.")
        except Exception as e: # Catch other potential errors during parsing
            logger.warning(f"Error processing input as JSON, treating as plain text: {e}")

        payload = InputReceivedPayload(
            user_input=text_input,
            input_id=input_id,    # This is the new UUID generated by InputHandler
            timestamp=timestamp,
            correlation_id=correlation_id, # Pass the extracted correlation_id
            reply_to_e2e=reply_to_e2e     # Pass the extracted reply_to_e2e
        )
        try:
            # Always use JetStream for input events in this version
            await self._publisher.publish(
                EventSubjects.INPUT_RECEIVED, payload,
                use_jetstream=True, timeout=10.0 # Use JS, increased timeout
            )
            logger.info(f"Published input ID {input_id} (Correlation ID: {correlation_id}) (JetStream)")
            return input_id # Return InputHandler's internal ID
        except Exception as e:
            logger.error(f"Failed to publish input: {e}", exc_info=True)
            raise